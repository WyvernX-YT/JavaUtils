package me.wyvernx.javaUtils.types.integers;


import me.wyvernx.javaUtils.types.booleans.Bool;
import org.jetbrains.annotations.NotNull;

import java.io.Serializable;
import java.lang.constant.Constable;
import java.lang.constant.ConstantDesc;
import java.math.BigInteger;
import java.util.Optional;

public class LargeInt extends Number implements Comparable<LargeInt>, Serializable, Constable {

    public static final String MIN_VALUE = "-9889491929481298472019481029402948210948904875903439024790123890217489312904231894712904210924829047290480914812904809214879048290482190480921482910481209481094889579812734890124789127490127498217412894790812740129740129741289471289024798472198047201470214729846217468921749812467891246928174981274982146712984729184791284798217491284612984791286412984769281641278946986989889491929481298472019481029402948210948904875903439024790123890217489312904231894712904210924829047290480914812904809214879048290482190480921482910481209481094889579812734890124789127490127498217412894790812740129740129741289471289024798472198047201470214729846217468921749812467891246928174981274982146712984729184791284798217491284612984791286412984769281641278946986989889491929481298472019481029402948210948904875903439024790123890217489312904231894712904210924829047290480914812904809214879048290482190480921482910481209481094889579812734890124789127490127498217412894790812740129740129741289471289024798472198047201470214729846217468921749812467891246928174981274982146712984729184791284798217491284612984791286412984769281641278946986989889491929481298472019481029402948210948904875903439024790123890217489312904231894712904210924829047290480914812904809214879048290482190480921482910481209481094889579812734890124789127490127498217412894790812740129740129741289471289024798472198047201470214729846217468921749812467891246928174981274982146712984729184791284798217491284612984791286412984769281641278946986989889491929481298472019481029402948210948904875903439024790123890217489312904231894712904210924829047290480914812904809214879048290482190480921482910481209481094889579812734890124789127490127498217412894790812740129740129741289471289024798472198047201470214729846217468921749812467891246928174981274982146712984729184791284798217491284612984791286412984769281641278946986989889491929481298472019481029402948210948904875903439024790123890217489312904231894712904210924829047290480914812904809214879048290482190480921482910481209481094889579812734890124789127490127498217412894790812740129740129741289471289024798472198047201470214729846217468921749812467891246928174981274982146712984729184791284798217491284612984791286412984769281641278946986987839721931729838723892739";
    public static final String MAX_VALUE = "9889491929481298472019481029402948210948904875903439024790123890217489312904231894712904210924829047290480914812904809214879048290482190480921482910481209481094889579812734890124789127490127498217412894790812740129740129741289471289024798472198047201470214729846217468921749812467891246928174981274982146712984729184791284798217491284612984791286412984769281641278946986989889491929481298472019481029402948210948904875903439024790123890217489312904231894712904210924829047290480914812904809214879048290482190480921482910481209481094889579812734890124789127490127498217412894790812740129740129741289471289024798472198047201470214729846217468921749812467891246928174981274982146712984729184791284798217491284612984791286412984769281641278946986989889491929481298472019481029402948210948904875903439024790123890217489312904231894712904210924829047290480914812904809214879048290482190480921482910481209481094889579812734890124789127490127498217412894790812740129740129741289471289024798472198047201470214729846217468921749812467891246928174981274982146712984729184791284798217491284612984791286412984769281641278946986989889491929481298472019481029402948210948904875903439024790123890217489312904231894712904210924829047290480914812904809214879048290482190480921482910481209481094889579812734890124789127490127498217412894790812740129740129741289471289024798472198047201470214729846217468921749812467891246928174981274982146712984729184791284798217491284612984791286412984769281641278946986989889491929481298472019481029402948210948904875903439024790123890217489312904231894712904210924829047290480914812904809214879048290482190480921482910481209481094889579812734890124789127490127498217412894790812740129740129741289471289024798472198047201470214729846217468921749812467891246928174981274982146712984729184791284798217491284612984791286412984769281641278946986989889491929481298472019481029402948210948904875903439024790123890217489312904231894712904210924829047290480914812904809214879048290482190480921482910481209481094889579812734890124789127490127498217412894790812740129740129741289471289024798472198047201470214729846217468921749812467891246928174981274982146712984729184791284798217491284612984791286412984769281641278946986987839721931729838723892739";
    public static BigInteger i;

    public LargeInt(String value) {
        i = new BigInteger(value);
        int compareVal = i.compareTo(new BigInteger(MIN_VALUE));
        int compareMax = i.compareTo(new BigInteger(MAX_VALUE));
        if(compareVal == 0) {

        }else if(compareMax == 1) {
            throw new IllegalArgumentException("IS GREATER THAN MAX VALUE");
        } else if(compareVal == 1){

        } else {
            throw new IllegalArgumentException("IS SMALLER THAN MIN VALUE");
        }
    }

    public Bool isGreater(LargeInt other) {
        int compareVal = compareTo(other);
        if(compareVal == 1)
            return Bool.True;
        else
            return Bool.False;

    }
    public boolean isGreater(int i) {
        int compareVal = compareTo(new LargeInt(String.valueOf(i)));
        if(compareVal == 1)
            return true;
        else
            return false;
    }
    public Bool isLesser(LargeInt other) {
        int compareVal = compareTo(other);
        if(compareVal == 2)
            return Bool.True;
        else
            return Bool.False;

    }
    public boolean isLesser(int i) {
        int compareVal = compareTo(new LargeInt(String.valueOf(i)));
        if(compareVal == 2)
            return true;
        else
            return false;
    }


    public String get() {
        return i.toString();
    }
    public String set(String s) {
        i =i = new BigInteger(s);
        int compareVal = i.compareTo(new BigInteger(MIN_VALUE));
        int compareMax = i.compareTo(new BigInteger(MAX_VALUE));
        if(compareVal == 0) {

        }else if(compareMax == 1) {
            throw new IllegalArgumentException("IS GREATER THAN MAX VALUE");
        } else if(compareVal == 1){

        } else {
            throw new IllegalArgumentException("IS SMALLER THAN MIN VALUE");
        }
        return get();
    }
    public String add(String s) {
        i =i.add(new BigInteger(s));
        int compareVal = i.compareTo(new BigInteger(MIN_VALUE));
        int compareMax = i.compareTo(new BigInteger(MAX_VALUE));
        if(compareVal == 0) {

        }else if(compareMax == 1) {
            throw new IllegalArgumentException("IS GREATER THAN MAX VALUE");
        } else if(compareVal == 1){

        } else {
            throw new IllegalArgumentException("IS SMALLER THAN MIN VALUE");
        }
        return get();
    }
    public String subtract(String s) {
        i =i.subtract(new BigInteger(s));
        int compareVal = i.compareTo(new BigInteger(MIN_VALUE));
        int compareMax = i.compareTo(new BigInteger(MAX_VALUE));
        if(compareVal == 0) {

        }else if(compareMax == 1) {
            throw new IllegalArgumentException("IS GREATER THAN MAX VALUE");
        } else if(compareVal == 1){

        } else {
            throw new IllegalArgumentException("IS SMALLER THAN MIN VALUE");
        }
        return get();
    }
    public String multiply(String s) {
        i =i.multiply(new BigInteger(s));
        int compareVal = i.compareTo(new BigInteger(MIN_VALUE));
        int compareMax = i.compareTo(new BigInteger(MAX_VALUE));
        if(compareVal == 0) {

        }else if(compareMax == 1) {
            throw new IllegalArgumentException("IS GREATER THAN MAX VALUE");
        } else if(compareVal == 1){

        } else {
            throw new IllegalArgumentException("IS SMALLER THAN MIN VALUE");
        }
        return get();
    }
    public String pow(int s) {
        i =i.pow(s);
        int compareVal = i.compareTo(new BigInteger(MIN_VALUE));
        int compareMax = i.compareTo(new BigInteger(MAX_VALUE));
        if(compareVal == 0) {

        }else if(compareMax == 1) {
            throw new IllegalArgumentException("IS GREATER THAN MAX VALUE");
        } else if(compareVal == 1){

        } else {
            throw new IllegalArgumentException("IS SMALLER THAN MIN VALUE");
        }
        return get();
    }
    public String divide(String s) {
        i = i.divide(new BigInteger(s));
        int compareVal = i.compareTo(new BigInteger(MIN_VALUE));
        int compareMax = i.compareTo(new BigInteger(MAX_VALUE));
        if(compareVal == 0) {

        }else if(compareMax == 1) {
            throw new IllegalArgumentException("IS GREATER THAN MAX VALUE");
        } else if(compareVal == 1){

        } else {
            throw new IllegalArgumentException("IS SMALLER THAN MIN VALUE");
        }
        return get();
    }


    public BigInteger bigIntegerValue() {
        return i;
    }
    @Override
    public int intValue() {
        return i.intValue();
    }

    @Override
    public long longValue() {
        return i.longValue();
    }

    @Override
    public float floatValue() {
        return i.floatValue();
    }

    @Override
    public double doubleValue() {
        return i.doubleValue();
    }

    @Override
    public int compareTo(@NotNull LargeInt o) {
        return o.bigIntegerValue().compareTo(i) ;
    }

    @Override
    public Optional <? extends ConstantDesc> describeConstable() {
        return Optional.empty();
    }

    @Override
    public String toString() {
        return this.getClass().getName() + ";" + "" + i.bitLength() + "" + i.bitCount()  + "" + i.toByteArray() + ":" + this.bigIntegerValue().getLowestSetBit();
    }

}
